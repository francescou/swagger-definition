---
swagger: "2.0"
info:
  description: "Provides access to the workflow features of Alfresco 5.1"
  version: "1"
  title: "Alfresco Workflow REST API (5.1)"
  contact:
    url: "http://docs.alfresco.com/5.1/pra/1/concepts/pra-resources.html"
host: "localhost:8080"
basePath: "/alfresco/api/-default-/public/workflow/versions/1"
consumes:
- "application/json"
produces:
- "application/json"
tags:
- name: "deployments"
  description: "Retrieve and manage Deployments"
- name: "process-definitions"
  description: "Retrieve and manage Process Definitions"
- name: "processes"
  description: "Retrieve and manage Processes"
- name: "tasks"
  description: "Retrieve and manage Tasks"
paths:
  /deployments:
    get:
      tags:
      - "deployments"
      summary: "Returns a paged list of deployments."
      description: "The authenticated user must have role admin (non-network deployments)\
        \ or network admin (networks enabled).\nIf networks are enabled, the network\
        \ admin can only see the deployments in the given network.\n"
      operationId: "getDeployments"
      parameters:
      - name: "skipCount"
        in: "query"
        description: "An integer describing how many entities exist in the collection\
          \ before those included in this list."
        required: false
        type: "integer"
      - name: "maxItems"
        in: "query"
        description: "The maximum items request to return."
        required: false
        type: "integer"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/DeploymentPaging"
  /deployments/{deploymentId}:
    get:
      tags:
      - "deployments"
      summary: "Returns a specifid deployment defined by deploymentId."
      description: "The authenticated user must have role admin (non-network deployments)\
        \ or network admin (networks enabled).\nIf networks is enabled, the deployment\
        \ is only returned if the deployment is in the given network.\n"
      operationId: "getDeployment"
      produces:
      - "application/json"
      parameters:
      - name: "deploymentId"
        in: "path"
        description: "The unique id must be a String. It is returned as an 'id' from\
          \ the entity"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/DeploymentEntry"
        404:
          description: "If deploymentId doesn't exist"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "deployments"
      summary: "Remove a specific deployment."
      description: "This request will delete the deployment including the tasks, process\
        \ definitions contained in the deployment. It will also delete processes and\
        \ history information associated with the deployment."
      operationId: "removeDeployment"
      produces:
      - "application/json"
      parameters:
      - name: "deploymentId"
        in: "path"
        description: "The unique id must be a String. It is returned as an 'id' from\
          \ the entity"
        required: true
        type: "string"
      responses:
        204:
          description: "Successful response"
  /process-definitions:
    get:
      tags:
      - "process-definitions"
      summary: "Returns a paged list of process definitions."
      description: "In non-network deployments, any authenticated user will see all\
        \ the process definitions.\nIf networks are enabled, the network admin can\
        \ only see the deployments in the given network."
      operationId: "getProcessDefinitions"
      parameters:
      - name: "skipCount"
        in: "query"
        description: "An integer describing how many entities exist in the collection\
          \ before those included in this list."
        required: false
        type: "integer"
      - name: "maxItems"
        in: "query"
        description: "The maximum items request to return."
        required: false
        type: "integer"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/ProcessDefinitionPaging"
  /process-definitions/{processDefinitionId}:
    get:
      tags:
      - "process-definitions"
      summary: "Returns a process definition identified by a process definition id."
      description: "In non-network deployments, any authenticated user will see all\
        \ the process definitions. If networks are enabled, the network admin can\
        \ only see the deployments in the given network.\n"
      operationId: "getProcessDefinition"
      produces:
      - "application/json"
      parameters:
      - name: "processDefinitionId"
        in: "path"
        description: "The unique id must be a String. It is returned as an 'id' from\
          \ the entity"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/ProcessDefinitionEntry"
        404:
          description: "If processDefinitionId doesn't exist"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
  /process-definitions/{processDefinitionId}/image:
    get:
      tags:
      - "process-definitions"
      summary: "Returns an image that represents a single process definition identified\
        \ by the process definition id."
      description: "In non-network deployments, any authenticated user will see all\
        \ the process definitions.\nIf networks are enabled, the network admin can\
        \ only see the deployments in the given network.\n"
      operationId: "getProcessDefinitionImage"
      produces:
      - "application/json"
      - "image/png"
      parameters:
      - name: "processDefinitionId"
        in: "path"
        description: "The unique id must be a String. It is returned as an 'id' from\
          \        the entity"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "file"
        404:
          description: "If processDefinitionId doesn't exist"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
  /process-definitions/{processDefinitionId}/start-form-model:
    get:
      tags:
      - "process-definitions"
      summary: "Returns a model of the start form type definition."
      description: "An authenticated user will have access to all start form models.\
        \ In a network, only start form models that are inside the given network are\
        \ returned. \n"
      operationId: "getProcessDefinitionStartFormModel"
      produces:
      - "application/json"
      parameters:
      - name: "processDefinitionId"
        in: "path"
        description: "The unique id must be a String. It is returned as an 'id' from\
          \ the entity"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/ProcessDefinitionEntry"
        404:
          description: "If processDefinitionId doesn't exist"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
  /processes:
    get:
      tags:
      - "processes"
      summary: "Returns a paged list of processes."
      description: "An authenticated user will have access to a processes if the user\
        \ has started the process or if the user is involved in any of the process’\
        s tasks. In a network, only processes that are inside the given network are\
        \ returned.\nIn non-network deployments, any authenticated user will see all\
        \ the process definitions.\nIf networks are enabled, the network admin can\
        \ only see the deployments in the given network.\n"
      operationId: "getProcesses"
      parameters:
      - name: "skipCount"
        in: "query"
        description: "An integer describing how many entities exist in the collection\
          \ before those included in this list."
        required: false
        type: "integer"
      - name: "maxItems"
        in: "query"
        description: "The maximum items request to return."
        required: false
        type: "integer"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/ProcessPaging"
  /processes/{processId}:
    get:
      tags:
      - "processes"
      summary: "Returns a process identified by a process id."
      description: "An authenticated user will have access to a processes if the user\
        \  has started the process or if the user is involved in any of the process’\
        s tasks. In a network, only processes that are inside the given network are\
        \ returned.\nIn non-network deployments, administrators can see all processes\
        \ and perform all  operations on tasks. In network deployments, network administrators\
        \ can see all  processes in their network and perform all operations on tasks\
        \ in their network.\n"
      operationId: "getProcess"
      produces:
      - "application/json"
      parameters:
      - name: "processId"
        in: "path"
        description: "The unique id must be a String. It is returned as an 'id' from\
          \ the entity"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/ProcessEntry"
        404:
          description: "If processId doesn't exist"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "processes"
      summary: "Delete a specific process."
      description: "This request will delete the process including its tasks."
      operationId: "deleteProcess"
      produces:
      - "application/json"
      parameters:
      - name: "processId"
        in: "path"
        description: "The unique id must be a String. It is returned as an 'id' from\
          \ the entity"
        required: true
        type: "string"
      responses:
        204:
          description: "Successful response"
        404:
          description: "The processId does not exist in this network"
  /tasks:
    get:
      tags:
      - "tasks"
      summary: "Returns a paged list of tasks visible to the authenticated user."
      description: "Tasks are returned for which the authenticated user is the assignee\
        \  or a candidate. If networks are enabled, the only tasks that are inside\
        \ the  given network are returned.\nIn non-network deployments, administrators\
        \ can see all processes and perform  all operations on tasks. In network deployments,\
        \ network administrators can  see all processes in their network and perform\
        \ all operations on tasks in  their network.\n"
      operationId: "getTasks"
      parameters:
      - name: "skipCount"
        in: "query"
        description: "An integer describing how many entities exist in the collection\
          \ before those included in this list."
        required: false
        type: "integer"
      - name: "maxItems"
        in: "query"
        description: "The maximum items request to return."
        required: false
        type: "integer"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/TaskPaging"
  /tasks/{taskId}:
    get:
      tags:
      - "tasks"
      summary: "Returns a task identified by a task id."
      description: "An authenticated user will have access to a processes if the user\
        \  has started the process or if the user is involved in any of the process’\
        s tasks. In a network, only tasks that are inside the given network are returned.\n\
        In non-network deployments, administrators can see all processes and perform\
        \ all  operations on tasks. In network deployments, network administrators\
        \ can see all  processes in their network and perform all operations on tasks\
        \ in their network.\n"
      operationId: "getTask"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "The unique id must be a String. It is returned as an 'id' from\
          \ the entity"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/TaskEntry"
        404:
          description: "If taskId doesn't exist"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
definitions:
  Error:
    type: "object"
    properties:
      error:
        type: "object"
        properties:
          errorKey:
            type: "string"
          statusCode:
            type: "integer"
            format: "int32"
          briefSummary:
            type: "string"
          stackTrace:
            type: "string"
          descriptionURL:
            type: "string"
  Pagination:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int32"
      hasMoreItems:
        type: "boolean"
      totalItems:
        type: "integer"
        format: "int64"
      skipCount:
        type: "integer"
        format: "int64"
      maxItems:
        type: "integer"
        format: "int64"
  DeploymentPaging:
    type: "object"
    properties:
      list:
        type: "object"
        properties:
          pagination:
            $ref: "#/definitions/Pagination"
          entries:
            type: "array"
            items:
              type: "object"
              $ref: "#/definitions/DeploymentEntry"
  DeploymentEntry:
    type: "object"
    properties:
      entry:
        type: "object"
        $ref: "#/definitions/Deployment"
  Deployment:
    type: "object"
    description: "A deployment resource represents one file inside a deployment.\n\
      Process files, forms and perhaps some other files are authored in a separate\
      \ environment. The act of deployment brings them into the runtime workflow engine.\n\
      A deployment is a collection of files that include all resources to specify\
      \ one or more process definitions. After deployment, the included process definitions\
      \ are known to the workflow runtime engine and new processes can be started.\n\
      Users can then continue to edit the process and other files in their authoring\
      \ environment like e.g. our eclipse based process editor. A redeployment will\
      \ result in a complete separate deployment containing new versions of the process\
      \ definition.\nWhen a process definition inside a new deployment has the same\
      \ key as an existing process definition, then it is considered a new version\
      \ of the existing process definition.\n"
    required:
    - "id"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      category:
        type: "string"
      deployedAt:
        type: "string"
        format: "date"
  ProcessDefinitionPaging:
    type: "object"
    properties:
      list:
        type: "object"
        properties:
          pagination:
            $ref: "#/definitions/Pagination"
          entries:
            type: "array"
            items:
              type: "object"
              $ref: "#/definitions/ProcessDefinitionEntry"
  ProcessDefinitionEntry:
    type: "object"
    properties:
      entry:
        type: "object"
        $ref: "#/definitions/ProcessDefinition"
  ProcessDefinition:
    type: "object"
    description: "A process definition is a description of an execution flow in terms\
      \ of activities. New processes are created and started for a process definition.\n"
    required:
    - "id"
    properties:
      id:
        type: "string"
        description: "The unique id of this process definition"
      key:
        type: "string"
        description: "The key of this process definition"
      name:
        type: "string"
        description: "The name of this process definition"
      category:
        type: "string"
        description: "The category to which this process definition belongs"
      deploymentId:
        type: "string"
        description: "The deployment of which this process definition is a part"
      title:
        type: "string"
        description: "The title of this process definition"
      description:
        type: "string"
        description: "The description of this process definition"
      startFormResourceKey:
        type: "string"
        description: "The start form key"
      graphicNotationDefined:
        type: "boolean"
  ProcessPaging:
    type: "object"
    properties:
      list:
        type: "object"
        properties:
          pagination:
            $ref: "#/definitions/Pagination"
          entries:
            type: "array"
            items:
              type: "object"
              $ref: "#/definitions/ProcessEntry"
  ProcessEntry:
    type: "object"
    properties:
      entry:
        type: "object"
        $ref: "#/definitions/Process"
  Process:
    type: "object"
    description: "A process describes a running instance of a process definition.\n\
      When a new deployment includes a process definition that is already deployed\
      \ with the same key, the newly deployed process definition will be considered\
      \ a new version of the same process definition. By default processes will keep\
      \ running in the process definition they are started in. But new processes can\
      \ be started in the latest version of a process definition by using the processDefinitionKey\
      \ parameter.\nIn non-network deployments, administrators can see all processes\
      \ and perform all operations on tasks. In network deployments, network administrators\
      \ can see processes in their network and perform all operations on tasks in\
      \ their network.\n"
    required:
    - "id"
    properties:
      id:
        type: "string"
        description: "The unique id of this process"
      processDefinitionId:
        type: "string"
        description: "The unique identity of the owning process definition"
      businessKey:
        type: "string"
        description: "The business key"
      startedAt:
        type: "string"
        format: "date"
        description: "The date time this process started"
      endedAt:
        type: "string"
        format: "date"
        description: "The date time this process started"
      durationInMs:
        type: "integer"
        description: "The duration of this process"
      startActivityDefinitionId:
        type: "string"
        description: "The id of the first activity in the process"
      endActivityDefinitionId:
        type: "string"
        description: "The id of the last activity in the process"
      startUserId:
        type: "string"
        description: "The id of the user who started the process"
      deleteReason:
        type: "string"
        description: "The reason this process was canceled"
  TaskPaging:
    type: "object"
    properties:
      list:
        type: "object"
        properties:
          pagination:
            $ref: "#/definitions/Pagination"
          entries:
            type: "array"
            items:
              type: "object"
              $ref: "#/definitions/TaskEntry"
  TaskEntry:
    type: "object"
    properties:
      entry:
        type: "object"
        $ref: "#/definitions/Task"
  Task:
    type: "object"
    description: "A task describes one task for a human user.\n"
    required:
    - "id"
    properties:
      id:
        type: "string"
        description: "The unique id of this task"
      processId:
        type: "string"
        description: "The containing process's unique id"
      processDefinitionId:
        type: "string"
        description: "The unique identity of the owning process definition"
      activityDefinitionId:
        type: "string"
        description: "The activity id of this task"
      name:
        type: "string"
        description: "The text name of this task"
      description:
        type: "string"
        description: "The description of this task"
      dueAt:
        type: "string"
        format: "date"
        description: "The date time this task is due"
      startedAt:
        type: "string"
        format: "date"
        description: "The date time this task started"
      endedAt:
        type: "string"
        format: "date"
        description: "The date time this task started"
      durationInMs:
        type: "integer"
        description: "The duration of this task"
      priority:
        type: "integer"
        description: "The numeric priority of this task"
      owner:
        type: "string"
        description: "The id of the user who owns this task"
      assignee:
        type: "string"
        description: "The id of the user who is currently assigned this task"
      formResourceKey:
        type: "string"
        description: "The key of the form for this task"
      state:
        type: "string"
        description: "The state of this task"
      variables:
        type: "array"
        description: "An array of variables for this task"
        items:
          type: "object"
          $ref: "#/definitions/Variable"
  Variable:
    type: "object"
    description: "A task variable.\n"
    properties:
      scope:
        type: "string"
      name:
        type: "string"
      value:
        type: "integer"
      type:
        type: "string"
