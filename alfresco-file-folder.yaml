---
swagger: "2.0"
info:
  description: "Provides access to the file folder capabilities of Alfresco"
  version: "1"
  title: "Alfresco File Folder REST API"
host: "localhost:8080"
basePath: "/alfresco/api/-default-/public/alfresco/versions/1"
consumes:
- "application/json"
produces:
- "application/json"
tags:
- name: "nodes"
  description: "Retrieve and manage Nodes"
paths:
  /nodes/{nodeId}:
    get:
      tags:
      - "nodes"
      summary: "Get Node (File or Folder) Information"
      description: "Returns the info (metadata/properties) for a given file or folder.\
        \ Returns basic info by default. Use \"select\" to return additional info\
        \ (eg. path, isLink)"
      parameters:
      - name: "nodeId"
        in: "path"
        description: "file or folder id (can use \"-root-\",\"-my-\", or \"-shared-\"\
          \ folder aliases)"
        required: true
        type: "string"
      - name: "select"
        in: "query"
        description: "return additional info, eg. path, isLink (default false)"
        required: false
        type: "string"
      - name: "path"
        in: "query"
        description: "return info on node based on this path (relative to the parent\
          \ folder nodeId)"
        required: false
        type: "string"
      - name: "properties"
        in: "query"
        description: "to reduce network bandwidth, only return specified list of JSON\
          \ elements in the response"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Nodes"
        400:
          description: "Error - illegal arguments"
        403:
          description: "Error - permission denied"
        404:
          description: "Error - not found"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "nodes"
      summary: "Update Node (File or Folder) Information"
      description: "Update the info (metadata/properties) for a given file or folder.\
        \ Returns basic info by default'"
      parameters:
      - name: "nodeId"
        in: "path"
        description: "file or folder id"
        required: true
        type: "string"
      - name: "properties"
        in: "query"
        description: "to reduce network bandwidth, only return specified list of JSON\
          \ elements in the response"
        required: false
        type: "string"
      responses:
        200:
          description: "Updated OK"
          schema:
            $ref: "#/definitions/Nodes"
        400:
          description: "Error - illegal arguments"
        403:
          description: "Error - permission denied"
        404:
          description: "Error - not found"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "nodes"
      description: "Delete given file or folder. For folder it cascade deletes children."
      parameters:
      - name: "nodeId"
        in: "path"
        description: "file or folder id"
        required: true
        type: "string"
      responses:
        204:
          description: "Deleted OK (No Content)"
        400:
          description: "Error - illegal arguments"
        403:
          description: "Error - permission denied"
        404:
          description: "Error - not found"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
  /nodes/{parentFolderNodeId}/children:
    get:
      tags:
      - "nodes"
      summary: "List Folder Children"
      description: "Returns a paged list of folder children. Returns minimal info\
        \ by default. Use \"select\" to return additional info (eg. properties, myns:myprop,\
        \ isLink)"
      parameters:
      - name: "parentFolderNodeId"
        in: "path"
        description: "parent folder id (can use \"-root-\",\"-my-\", or \"-shared-\"\
          \ folder aliases)"
        required: true
        type: "string"
      - name: "skipCount"
        in: "query"
        description: "for paging (default 0)"
        required: false
        type: "string"
      - name: "maxItems"
        in: "query"
        description: "for paging (default 100)"
        required: false
        type: "string"
      - name: "orderBy"
        in: "query"
        description: "for sorting - eg. orderBy=modifiedAt%20DESC"
        required: false
        type: "string"
      - name: "where"
        in: "query"
        description: "for filtering - eg. where=(isFolder=false)"
        required: false
        type: "string"
      - name: "select"
        in: "query"
        description: "return additional info, eg. isLink (default false)"
        required: false
        type: "string"
      - name: "properties"
        in: "query"
        description: "to reduce network bandwidth, only return specified list of JSON\
          \ elements in the response"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Nodes"
        400:
          description: "Error - illegal arguments"
        403:
          description: "Error - permission denied"
        404:
          description: "Error - not found"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "nodes"
      summary: "Create Node (File or Folder)"
      description: "If using JSON request then create folder or empty file. If using\
        \ multipart/form-data then create (upload) new file with content."
      parameters:
      - name: "parentFolderNodeId"
        in: "path"
        description: "parent folder id (can use \"-root-\",\"-my-\", or \"-shared-\"\
          \ folder aliases)"
        required: true
        type: "string"
      - name: "properties"
        in: "query"
        description: "to reduce network bandwidth, only return specified list of JSON\
          \ elements in the response"
        required: false
        type: "string"
      responses:
        201:
          description: "Created OK"
          schema:
            $ref: "#/definitions/Nodes"
        400:
          description: "Error - illegal arguments"
        403:
          description: "Error - permission denied"
        404:
          description: "Error - not found"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
  /nodes/{fileNodeId}/content:
    get:
      tags:
      - "nodes"
      summary: "Download File"
      description: "Download the file content"
      parameters:
      - name: "fileNodeId"
        in: "path"
        description: "file id"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Nodes"
        400:
          description: "Error - illegal arguments"
        403:
          description: "Error - permission denied"
        404:
          description: "Error - not found"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "nodes"
      summary: "Update File"
      description: "Update an existing file with new file content (as a new version,\
        \ if versionable)"
      parameters:
      - name: "fileNodeId"
        in: "path"
        description: "file id"
        required: true
        type: "string"
      responses:
        200:
          description: "Updated OK"
          schema:
            $ref: "#/definitions/Nodes"
        400:
          description: "Error - illegal arguments"
        403:
          description: "Error - permission denied"
        404:
          description: "Error - not found"
        500:
          description: "Error response"
          schema:
            $ref: "#/definitions/Error"
definitions:
  Error:
    type: "object"
    properties:
      error:
        type: "object"
        properties:
          errorKey:
            type: "string"
          statusCode:
            type: "integer"
            format: "int32"
          briefSummary:
            type: "string"
          stackTrace:
            type: "string"
          descriptionURL:
            type: "string"
  UserInfo:
    type: "object"
    properties:
      displayName:
        type: "string"
      userName:
        type: "string"
  Nodes:
    type: "object"
    properties:
      name:
        type: "string"
      nodeType:
        type: "string"
      isFolder:
        type: "boolean"
      modifiedAt:
        type: "string"
      modifiedByUser:
        $ref: "#/definitions/UserInfo"
      createdAt:
        type: "string"
      createdByUser:
        $ref: "#/definitions/UserInfo"
